name: 'Github Release and Slack Notification'
description: 'Sends Slack Notification for your GitHub Release with Changelog attached.'
inputs:
  projectName:
    description: 'Name of the project'
    required: true
  sendSlackNotification:
    description: 'Send Slack Notification'
    required: false
    default: 'true'
  slackChannel:
    description: 'Slack Channel to send the notification'
    required: false
    default: 'production_releases'
  sendRollbackStartedSlackNotification:
    description: 'Send Rollback Started Slack Notification'
    required: false
    default: 'false'
  sendRollbackCompletedSlackNotification:
    description: 'Send Rollback Started Slack Notification'
    required: false
    default: 'false'
  versionRollbackTo:
    description: 'Version Rollback to'
    required: false

permissions:
  contents: read
  id-token: write

runs:
  using: "composite"
  steps:
    - name: Set new version name
      if: ${{ inputs.sendRollbackStartedSlackNotification != 'true' && inputs.sendRollbackCompletedSlackNotification != 'true'}}
      id: release_version
      shell: pwsh
      run: |
        $branchName = $env:BranchName
        $shortHash = "$env:SHA".Substring(0, 7)
        $dateTime = Get-Date -Format "yyyy.MM.dd" 
        $versionName = "$branchName.$dateTime.$env:Rev.$shortHash"
        Write-Host "Version Name: $versionName"
        "version=$versionName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      env:
        BranchName: ${{ github.ref_name }}
        Date: ${{ github.event.head_commit.timestamp }}
        Rev: ${{ github.run_number }}
        SHA: ${{ github.sha }}

    - name: Create GitHub Release
      if: ${{ inputs.sendRollbackStartedSlackNotification != 'true' && inputs.sendRollbackCompletedSlackNotification != 'true'}}
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.release_version.outputs.version }}
        name: ${{ inputs.projectName }} ${{ steps.release_version.outputs.version }}
        commit: ${{ github.sha }}
        draft: false
        prerelease: false
        generateReleaseNotes: true
        skipIfReleaseExists: true
        makeLatest: true

    - name: Assume AWS management account role
      if: ${{ inputs.sendSlackNotification == 'true' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::865076270365:role/github-ci-slack-webhook-url-read-role
        aws-region: eu-west-1
        role-session-name: "GitHubActions-DeployLayerStack"
        unset-current-credentials: true
    
    - name: Read SlackWebhookUrl AWS Secret value
      if: ${{ inputs.sendSlackNotification == 'true' }}
      id: slack_webhook_url
      run: |
        SLACK_WEBHOOK_URL=$(aws secretsmanager get-secret-value --secret-id arn:aws:secretsmanager:eu-west-1:865076270365:secret:SlackGithubActionsWebhookURL-vZcXfi --query SecretString --output text)
        echo "::add-mask::$SLACK_WEBHOOK_URL"
        echo "webhook_url=$SLACK_WEBHOOK_URL" >> $GITHUB_OUTPUT
      shell: bash

    - name: Sending notification to Slack
      if: ${{ inputs.sendSlackNotification == 'true' }}
      shell: pwsh
      run: |
        function Remove-Diacritics
        {
          Param(
          [String]$inputString
          )
          return($sb = [Text.Encoding]::ASCII.GetString([Text.Encoding]::GetEncoding("Cyrillic").GetBytes($inputString)))
        }

        $RollbackStarted = $env:RollbackStarted
        $RollbackCompleted = $env:RollbackCompleted
        $versionRollbackTo = $env:versionRollbackTo

        if (($RollbackStarted -eq "true") -or ($RollbackCompleted -eq "true")) {
          if ($null -eq $versionRollbackTo) {
              Write-Error "versionRollbackTo to is not provided. Exiting..."
              exit 1
          }

          $ghReleasesTags = gh release list --limit 15 --exclude-drafts --exclude-pre-releases --json tagName,isLatest --repo $env:repository | ConvertFrom-Json
          $latestReleaseTag = $ghReleasesTags | Where-Object { $_.isLatest -eq $true } | Select-Object -ExpandProperty tagName
          $previousReleaseTag = $versionRollbackTo
    
          Write-Host "Latest Release Tag: $latestReleaseTag"
          Write-Host "Previous Release Tag: $previousReleaseTag"
        } else {
          $body = gh release view $env:Version --json body --repo $env:repository | ConvertFrom-Json
          $releaseNotes = $body.body
          $releaseNotes = Remove-Diacritics -inputString $releaseNotes
        }

        if ($RollbackStarted -eq "true") {
          if ($latestReleaseTag -eq $previousReleaseTag) {
            $titleText = "$env:projectName ($latestReleaseTag) - Release In Progress"
            $messageText = "Releasing the same version: " + $previousReleaseTag
          } else { 
            $titleText = "$env:projectName ($latestReleaseTag) - Rollback In Progress"
            $messageText = "Previous version: " + $previousReleaseTag
          } 
        } elseif ($RollbackCompleted -eq "true") {
          if ($latestReleaseTag -eq $previousReleaseTag) {
            $titleText = "$env:projectName ($latestReleaseTag) - Release In Progress"
            $messageText = "No changelist attached."
          } else {
            $titleText = "$env:projectName ($latestReleaseTag) - Rollback Completed"
            $messageText = "Previous version: " + $previousReleaseTag

            gh release edit --latest "$previousReleaseTag" --repo $env:repository
          }
        } else {
          $titleText = "$env:projectName ($env:Version) - Successfully Released"
          $parts = $releaseNotes -split "##"

          if ($parts.count -lt 3) {
            $messageText = $releaseNotes -replace "## What's Changed", ""
          } else {
            $WhatsChanged = $parts[1]
            $messageText = $WhatsChanged -replace "What's Changed", ""
            $messageText+= "`n"
            $FullChangelogURL = $parts[2] -split "\n" | Select-Object -Last 1
            $messageText+= $FullChangelogURL
          }

          $messageText = $messageText.Replace('**', '')
          $messageText = $messageText.Replace('*', '-')
        }

        $payload = @{
          channel = $env:SlackChannel
          attachments = @(
            @{
              color = "#008000"
              title = $titleText
              title_link = "https://github.com/$env:repository/actions/runs/$env:runId"
              text = $messageText
              fallback = "Slack Notification"
            }
          )
        }

        $jsonPayload = $payload | ConvertTo-Json
        Invoke-RestMethod -Uri $env:SlackWebhookUrl -Method Post -Body $jsonPayload -ContentType "application/json"
      env:
        GH_TOKEN: ${{ github.token }}
        SlackWebhookUrl: ${{ steps.slack_webhook_url.outputs.webhook_url }}
        SlackChannel: ${{ inputs.slackChannel }}
        projectName: ${{ inputs.projectName }}
        runId: ${{ github.run_id }}
        repository: ${{ github.repository }}
        RollbackStarted: ${{ inputs.sendRollbackStartedSlackNotification }}
        RollbackCompleted: ${{ inputs.sendRollbackCompletedSlackNotification }}
        Version: ${{ steps.release_version.outputs.version }}
        versionRollbackTo: ${{ inputs.versionRollbackTo }}
